import { sql } from 'drizzle-orm';
import {
  index,
  jsonb,
  pgTable,
  timestamp,
  varchar,
  text,
  boolean,
  integer,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Session storage table.
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table.
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Content ideas generated by AI
export const contentIdeas = pgTable("content_ideas", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  platform: varchar("platform").notNull(), // youtube, tiktok, instagram
  title: text("title").notNull(),
  description: text("description"),
  hook: text("hook"),
  hashtags: text("hashtags").array(),
  keywords: text("keywords").array(),
  estimatedViews: integer("estimated_views"),
  estimatedEngagement: varchar("estimated_engagement"),
  duration: varchar("duration"),
  contentStyle: varchar("content_style"),
  targetAudience: varchar("target_audience"),
  niche: varchar("niche"),
  isFavorited: boolean("is_favorited").default(false),
  isUsed: boolean("is_used").default(false),
  createdAt: timestamp("created_at").defaultNow(),
});

// AI-generated video scripts and content
export const videoContent = pgTable("video_content", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  contentIdeaId: varchar("content_idea_id").references(() => contentIdeas.id, { onDelete: "set null" }),
  title: text("title").notNull(),
  script: text("script"),
  platform: varchar("platform").notNull(),
  aspectRatio: varchar("aspect_ratio"),
  duration: varchar("duration"),
  style: varchar("style"),
  mediaUrls: text("media_urls").array(),
  status: varchar("status").default("draft"), // draft, generated, published
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Generated hashtags and keywords
export const hashtags = pgTable("hashtags", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  contentDescription: text("content_description"),
  platform: varchar("platform").notNull(),
  niche: varchar("niche"),
  tags: text("tags").array(),
  trendingScore: integer("trending_score"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Content calendar and scheduling
export const contentCalendar = pgTable("content_calendar", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  contentIdeaId: varchar("content_idea_id").references(() => contentIdeas.id, { onDelete: "cascade" }),
  videoContentId: varchar("video_content_id").references(() => videoContent.id, { onDelete: "cascade" }),
  platform: varchar("platform").notNull(),
  title: text("title").notNull(),
  description: text("description"),
  scheduledDate: timestamp("scheduled_date").notNull(),
  status: varchar("status").default("scheduled"), // scheduled, published, cancelled
  createdAt: timestamp("created_at").defaultNow(),
});

// User platform stats and metrics
export const platformStats = pgTable("platform_stats", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  platform: varchar("platform").notNull(),
  followers: integer("followers").default(0),
  totalViews: integer("total_views").default(0),
  totalEngagement: integer("total_engagement").default(0),
  viralPosts: integer("viral_posts").default(0),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Schema exports
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;

export const insertContentIdeaSchema = createInsertSchema(contentIdeas).omit({
  id: true,
  createdAt: true,
});
export type InsertContentIdea = z.infer<typeof insertContentIdeaSchema>;
export type ContentIdea = typeof contentIdeas.$inferSelect;

export const insertVideoContentSchema = createInsertSchema(videoContent).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});
export type InsertVideoContent = z.infer<typeof insertVideoContentSchema>;
export type VideoContent = typeof videoContent.$inferSelect;

export const insertHashtagsSchema = createInsertSchema(hashtags).omit({
  id: true,
  createdAt: true,
});
export type InsertHashtags = z.infer<typeof insertHashtagsSchema>;
export type Hashtags = typeof hashtags.$inferSelect;

export const insertContentCalendarSchema = createInsertSchema(contentCalendar).omit({
  id: true,
  createdAt: true,
});
export type InsertContentCalendar = z.infer<typeof insertContentCalendarSchema>;
export type ContentCalendar = typeof contentCalendar.$inferSelect;

export const insertPlatformStatsSchema = createInsertSchema(platformStats).omit({
  id: true,
  updatedAt: true,
});
export type InsertPlatformStats = z.infer<typeof insertPlatformStatsSchema>;
export type PlatformStats = typeof platformStats.$inferSelect;
